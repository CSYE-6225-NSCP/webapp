name: Packer Build for AWS and GCP

on:
  push:
    branches:
      - main

jobs:
  build: 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

  packer-build:
    needs: build
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
      GCP_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      INSTANCE_TYPE: ${{ secrets.INSTANCE_TYPE }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_DIALECT: ${{ secrets.DB_DIALECT }}
      DB_LOGGING: ${{ secrets.DB_LOGGING }}
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
      GCP_DEMO_PROJECT_ID: ${{ secrets.GCP_DEMO_PROJECT_ID }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Authenticate with GCP with creds
        uses: google-github-actions/auth@v2
        with:
          credentials_json: '${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}'

      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          project_id: ${{ secrets.GCP_PROJECT_ID }}

      - name: Verify GCP Authentication
        run: gcloud auth list

      - name: Install Packer
        uses: hashicorp/setup-packer@main

      - name: Create webapp.zip from existing directory
        run: zip -r webapp.zip .
        shell: bash

      - name: Prepare Packer Files
        run: |
          mkdir -p AMI/files
          mv webapp.zip AMI/files/

      - name: Run `packer init`
        working-directory: AMI
        run: packer init csye-packer.pkr.hcl

      - name: Run `packer validate`
        working-directory: AMI
        run: packer validate csye-packer.pkr.hcl 

      - name: Build AWS and GCP Images in Parallel
        working-directory: AMI
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          GCP_PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
          GCP_SERVICE_ACCOUNT_EMAIL: ${{ secrets.GCP_SERVICE_ACCOUNT_EMAIL }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
          DB_LOGGING: ${{ secrets.DB_LOGGING }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
          GCP_DEMO_PROJECT_ID: ${{ secrets.GCP_DEMO_PROJECT_ID }}
        run: |
          packer build -parallel-builds=2 csye-packer.pkr.hcl


      - name: Get latest image name
        id: latest_image
        run: |
          IMAGE_NAME=$(gcloud compute images list \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --filter="name~'csye6225-${{ vars.ASSG_NAME }}-'" \
            --sort-by=~creationTimestamp \
            --format="value(name)" \
            --limit=1)

      - name: Share Image with Demo Project
        run: |
          gcloud compute images add-iam-policy-binding $IMAGE_NAME \
            --project=${{ secrets.GCP_PROJECT_ID }} \
            --member="projectEditor:${{ secrets.GCP_DEMO_PROJECT_ID }}" \
            --role="roles/compute.imageUser"
        shell: bash