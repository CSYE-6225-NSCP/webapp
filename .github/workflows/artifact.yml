name: Packer Build for AWS and GCP

on:
  push:
    branches:
      - main

jobs:
  build: 
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

  packer-build:
    needs: build
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      INSTANCE_TYPE: ${{ secrets.INSTANCE_TYPE }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_DIALECT: ${{ secrets.DB_DIALECT }}
      DB_LOGGING: ${{ secrets.DB_LOGGING }}
      SERVER_PORT: ${{ secrets.SERVER_PORT }}
      AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
      DEMO_USER: ${{ secrets.DEMO_USER }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Packer
        uses: hashicorp/setup-packer@main

      - name: Create webapp.zip from existing directory
        run: zip -r webapp.zip .
        shell: bash

      - name: Prepare Packer Files
        run: |
          mkdir -p AMI/files
          mv webapp.zip AMI/files/

      - name: Run `packer init`
        working-directory: AMI
        run: packer init csye-packer.pkr.hcl

      - name: Run `packer validate`
        working-directory: AMI
        run: packer validate csye-packer.pkr.hcl 

      - name: Build AWS and GCP Images in Parallel
        working-directory: AMI
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
          DB_LOGGING: ${{ secrets.DB_LOGGING }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          SERVER_PORT: ${{ secrets.SERVER_PORT }}
          AWS_DEMO_ACCOUNT_ID: ${{ secrets.AWS_DEMO_ACCOUNT_ID }}
          DEMO_USER: ${{ secrets.DEMO_USER }}
        run: |
          packer build csye-packer.pkr.hcl

      - name: Share the AMI and Save AMI_ID
        id: share_ami
        run: |
          AMI_ID=$(aws ec2 describe-images \
              --owners self \
              --filters "Name=state,Values=available" \
              --query "Images | sort_by(@, &CreationDate)[-1].ImageId" \
              --output text)

          if [ -n "$AMI_ID" ]; then
            echo "Sharing AMI $AMI_ID with DEMO account..."
            aws ec2 modify-image-attribute --image-id "$AMI_ID" \
              --launch-permission "{\"Add\": [{\"UserId\": \"${{ env.DEMO_USER }}\"}]}"
            echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
            echo "$AMI_ID" > ami_id.txt
          else
            echo "AMI not found, exiting."
            exit 1
          fi

      - name: Upload AMI_ID Artifact
        uses: actions/upload-artifact@v4
        with:
          name: ami_id
          path: ami_id.txt

              echo "ami_id=$AMI_ID" >> $GITHUB_OUTPUT
              echo "$AMI_ID" > ami_id.txt

  autoscaling_refresh:
    needs: packer-build
    runs-on: ubuntu-latest
    name: Auto Scaling Group Launch Template & Instance Refresh

    env:
      AWS_REGION: ${{ secrets.AWS_REGION }}
      DEPLOY_ENVIRONMENT: ${{ secrets.DEPLOY_ENVIRONMENT }}
      LAUNCH_TEMPLATE_ID: ${{ secrets.LAUNCH_TEMPLATE_ID }}
      AUTO_SCALING_GROUP_NAME: ${{ secrets.AUTO_SCALING_GROUP_NAME }}

    steps:
      - name: Download AMI_ID Artifact
        uses: actions/download-artifact@v4
        with:
          name: ami_id

      - name: Read AMI_ID
        id: read_ami_id
        run: |
          AMI_ID=$(cat ami_id.txt)
          echo "AMI_ID: $AMI_ID"
          echo "ami_id=$AMI_ID" >> $GITHUB_ENV

      - name: Configure AWS Credentials for Dev
        if: ${{ env.DEPLOY_ENVIRONMENT == 'dev' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Configure AWS Credentials for Demo
        if: ${{ env.DEPLOY_ENVIRONMENT == 'demo' }}
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_DEMO }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEMO }}
          aws-region: ${{ env.AWS_REGION }}