name: Packer Build and AMI Creation

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0.36
        env:
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install Node.js Dependencies
        run: npm install

      - name: Waiting for MySQL to be ready
        run: |
          until mysqladmin ping -h"127.0.0.1" --silent; do
            echo "Waiting for MySQL..."
            sleep 2
          done

      - name: Configuring MySQL Database and User
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          mysql -h127.0.0.1 -uroot -p"$DB_PASSWORD" <<EOF
          CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;
          CREATE USER IF NOT EXISTS '$DB_USER'@'%' IDENTIFIED WITH mysql_native_password BY '$DB_PASSWORD';
          EOF

      - name: Run Tests
        env:
          DB_HOST: 127.0.0.1
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: npm test

      - name: Build Application Artifact
        run: zip -r webapp.zip .

      - name: Upload Artifact
        uses: actions/upload-artifact@v4
        with:
          name: webapp-artifact
          path: webapp.zip

  packer-build:
    needs: build
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      INSTANCE_TYPE: ${{ secrets.INSTANCE_TYPE }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_DIALECT: ${{ secrets.DB_DIALECT }}

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3

      - name: Download Application Artifact
        uses: actions/download-artifact@v4
        with:
          name: webapp-artifact
          path: webapp/

      - name: Clean Workspace
        run: rm -rf packer_1.11.2_linux_amd64.zip 

      - name: Install Packer
        run: |
          sudo apt-get update
          sudo apt-get install -y unzip
          rm -rf packer packer_1.11.2_linux_amd64.zip
          curl -LO https://releases.hashicorp.com/packer/1.11.2/packer_1.11.2_linux_amd64.zip
          unzip -o packer_1.11.2_linux_amd64.zip
          sudo mv packer /usr/local/bin/
          packer --version


      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Create `.env` file
        run: |
          mkdir packer
          echo "DB_HOST=${{ secrets.DB_HOST }}" > packer/.env
          echo "DB_PORT=${{ secrets.DB_PORT }}" >> packer/.env
          echo "DB_USER=${{ secrets.DB_USER }}" >> packer/.env
          echo "DB_PASSWORD=${{ secrets.DB_PASSWORD }}" >> packer/.env
          echo "DB_NAME=${{ secrets.DB_NAME }}" >> packer/.env
          echo "DB_DIALECT=${{ secrets.DB_DIALECT }}" >> packer/.env

      - name: Run Packer Commands
        working-directory: packer
        run: |
          packer init packer.pkr.hcl
          packer validate packer.pkr.hcl
          packer build packer.pkr.hcl