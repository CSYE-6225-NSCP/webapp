name: Packer Build and AMI Creation

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      mysql:
        image: mysql:8.0.36
        env:
          MYSQL_DATABASE: ${{ secrets.DB_NAME }}
          MYSQL_ROOT_PASSWORD: ${{ secrets.DB_PASSWORD }}
        ports:
          - 3306:3306

    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'
          cache: 'npm'

      - name: Install Node.js Dependencies
        run: npm install


      - name: Configuring MySQL Database and User
        env:
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
        run: |
          mysql -h127.0.0.1 -uroot -p"$DB_PASSWORD" <<EOF
          CREATE DATABASE IF NOT EXISTS \`$DB_NAME\`;
          CREATE USER IF NOT EXISTS '$DB_USER'@'%' IDENTIFIED WITH mysql_native_password BY '$DB_PASSWORD';
          EOF

      - name: Run Tests
        env:
          DB_HOST: 127.0.0.1
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
        run: npm test

  packer-build:
    needs: build
    runs-on: ubuntu-latest
    env:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      AWS_REGION: ${{ secrets.AWS_REGION }}
      SSH_USERNAME: ${{ secrets.SSH_USERNAME }}
      INSTANCE_TYPE: ${{ secrets.INSTANCE_TYPE }}
      DB_HOST: ${{ secrets.DB_HOST }}
      DB_PORT: ${{ secrets.DB_PORT }}
      DB_USER: ${{ secrets.DB_USER }}
      DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
      DB_NAME: ${{ secrets.DB_NAME }}
      DB_DIALECT: ${{ secrets.DB_DIALECT }}
      DB_LOGGING: ${{ secrets.DB_LOGGING }}
      SERVER_PORT: ${{ secrets.SERVER_PORT}}

    steps:
      - name: Checkout Code
        uses: actions/checkout@v3

      - name: Configure AWS Creds
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}


      - name: Install Packer
        uses: hashicorp/setup-packer@main

      - name: Create webapp.zip from existing directory
        run: |
          zip -r webapp.zip .
        shell: bash

      - name: Prepare Packer Files
        run: |
          mkdir -p AMI/files
          mv webapp.zip AMI/files/
          cp webapp.service AMI/


      - name: Run `packer init`
        working-directory: AMI
        run: packer init csye-packer.pkr.hcl

      - name: Run `packer validate`
        working-directory: AMI
        run: packer validate csye-packer.pkr.hcl 

      - name: Build AMI
        env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          DB_USER: ${{ secrets.DB_USER }}
          DB_PASSWORD: ${{ secrets.DB_PASSWORD }}
          DB_NAME: ${{ secrets.DB_NAME }}
          DB_DIALECT: ${{ secrets.DB_DIALECT }}
          DB_LOGGING: ${{ secrets.DB_LOGGING }}
          DB_HOST: ${{ secrets.DB_HOST }}
          DB_PORT: ${{ secrets.DB_PORT }}
          SERVER_PORT: ${{ secrets.SERVER_PORT}}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}

        working-directory: AMI
        run: |
          packer build csye-packer.pkr.hcl